
SPIproj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000330  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080004b8  080004b8  000014b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004c4  080004c4  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004c4  080004c4  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004c4  080004c4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c4  080004c4  000014c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004c8  080004c8  000014c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004cc  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013ab  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000501  00000000  00000000  000033df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  000038e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000146  00000000  00000000  00003ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e962  00000000  00000000  00003bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001efa  00000000  00000000  00022558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd12a  00000000  00000000  00024452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e157c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000574  00000000  00000000  000e15c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000e1b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004a0 	.word	0x080004a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080004a0 	.word	0x080004a0

080001c8 <main>:
#define SPI_CS_PORT GPIOB

void SPI_Master_Init(void);
void SPI_Master_Transmit(uint8_t *data, uint8_t length);

int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
    uint8_t data[] = "Hello ESP32";
 80001ce:	4a0b      	ldr	r2, [pc, #44]	@ (80001fc <main+0x34>)
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80001d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    SPI_Master_Init();
 80001d8:	f000 f814 	bl	8000204 <SPI_Master_Init>

    while (1) {
        SPI_Master_Transmit(data, sizeof(data) - 1); // Send 11 bytes
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	210b      	movs	r1, #11
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f875 	bl	80002d0 <SPI_Master_Transmit>
        for (volatile int i = 0; i < 1000000; i++); // Simple delay
 80001e6:	2300      	movs	r3, #0
 80001e8:	603b      	str	r3, [r7, #0]
 80001ea:	e002      	b.n	80001f2 <main+0x2a>
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	3301      	adds	r3, #1
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	4a02      	ldr	r2, [pc, #8]	@ (8000200 <main+0x38>)
 80001f6:	4293      	cmp	r3, r2
 80001f8:	ddf8      	ble.n	80001ec <main+0x24>
        SPI_Master_Transmit(data, sizeof(data) - 1); // Send 11 bytes
 80001fa:	e7ef      	b.n	80001dc <main+0x14>
 80001fc:	080004b8 	.word	0x080004b8
 8000200:	000f423f 	.word	0x000f423f

08000204 <SPI_Master_Init>:
    }
}

void SPI_Master_Init(void) {
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    // Enable clocks for SPI1, GPIOA, GPIOB
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000208:	4b2d      	ldr	r3, [pc, #180]	@ (80002c0 <SPI_Master_Init+0xbc>)
 800020a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800020c:	4a2c      	ldr	r2, [pc, #176]	@ (80002c0 <SPI_Master_Init+0xbc>)
 800020e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000212:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000214:	4b2a      	ldr	r3, [pc, #168]	@ (80002c0 <SPI_Master_Init+0xbc>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000218:	4a29      	ldr	r2, [pc, #164]	@ (80002c0 <SPI_Master_Init+0xbc>)
 800021a:	f043 0303 	orr.w	r3, r3, #3
 800021e:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure SPI pins:
    // PA5 -> SCK, PA6 -> MISO, PA7 -> MOSI
    GPIOA->MODER &= ~((3 << (5 * 2)) | (3 << (6 * 2)) | (3 << (7 * 2))); // Clear mode bits
 8000220:	4b28      	ldr	r3, [pc, #160]	@ (80002c4 <SPI_Master_Init+0xc0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a27      	ldr	r2, [pc, #156]	@ (80002c4 <SPI_Master_Init+0xc0>)
 8000226:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800022a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2 << (5 * 2)) | (2 << (6 * 2)) | (2 << (7 * 2));  // Alternate function mode
 800022c:	4b25      	ldr	r3, [pc, #148]	@ (80002c4 <SPI_Master_Init+0xc0>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a24      	ldr	r2, [pc, #144]	@ (80002c4 <SPI_Master_Init+0xc0>)
 8000232:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000236:	6013      	str	r3, [r2, #0]

    // AF5 for SPI1
    GPIOA->AFR[0] &= ~((0xF << (5 * 4)) | (0xF << (6 * 4)) | (0xF << (7 * 4)));
 8000238:	4b22      	ldr	r3, [pc, #136]	@ (80002c4 <SPI_Master_Init+0xc0>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a21      	ldr	r2, [pc, #132]	@ (80002c4 <SPI_Master_Init+0xc0>)
 800023e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000242:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (5 << (5 * 4)) | (5 << (6 * 4)) | (5 << (7 * 4));
 8000244:	4b1f      	ldr	r3, [pc, #124]	@ (80002c4 <SPI_Master_Init+0xc0>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a1e      	ldr	r2, [pc, #120]	@ (80002c4 <SPI_Master_Init+0xc0>)
 800024a:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 800024e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000252:	6213      	str	r3, [r2, #32]

    // Configure PB6 as output for CS pin
    GPIOB->MODER &= ~(3 << (6 * 2));    // Clear mode bits for PB6
 8000254:	4b1c      	ldr	r3, [pc, #112]	@ (80002c8 <SPI_Master_Init+0xc4>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a1b      	ldr	r2, [pc, #108]	@ (80002c8 <SPI_Master_Init+0xc4>)
 800025a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800025e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (6 * 2));    // Output mode
 8000260:	4b19      	ldr	r3, [pc, #100]	@ (80002c8 <SPI_Master_Init+0xc4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a18      	ldr	r2, [pc, #96]	@ (80002c8 <SPI_Master_Init+0xc4>)
 8000266:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800026a:	6013      	str	r3, [r2, #0]
    GPIOB->OSPEEDR |= (3 << (6 * 2));   // High speed
 800026c:	4b16      	ldr	r3, [pc, #88]	@ (80002c8 <SPI_Master_Init+0xc4>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	4a15      	ldr	r2, [pc, #84]	@ (80002c8 <SPI_Master_Init+0xc4>)
 8000272:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000276:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER &= ~(1 << 6);         // Push-pull
 8000278:	4b13      	ldr	r3, [pc, #76]	@ (80002c8 <SPI_Master_Init+0xc4>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a12      	ldr	r2, [pc, #72]	@ (80002c8 <SPI_Master_Init+0xc4>)
 800027e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000282:	6053      	str	r3, [r2, #4]
    GPIOB->ODR |= SPI_CS_PIN;            // Set CS high (deselect)
 8000284:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <SPI_Master_Init+0xc4>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a0f      	ldr	r2, [pc, #60]	@ (80002c8 <SPI_Master_Init+0xc4>)
 800028a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800028e:	6153      	str	r3, [r2, #20]

    // Configure SPI1 in Master mode
    SPI1->CR1 = 0;
 8000290:	4b0e      	ldr	r3, [pc, #56]	@ (80002cc <SPI_Master_Init+0xc8>)
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
    SPI1->CR1 |= SPI_CR1_MSTR        // Master mode
 8000296:	4b0d      	ldr	r3, [pc, #52]	@ (80002cc <SPI_Master_Init+0xc8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a0c      	ldr	r2, [pc, #48]	@ (80002cc <SPI_Master_Init+0xc8>)
 800029c:	f443 7343 	orr.w	r3, r3, #780	@ 0x30c
 80002a0:	6013      	str	r3, [r2, #0]
               | SPI_CR1_BR_0        // Baud rate = fPCLK/4
               /* CPOL and CPHA = 0, so no need to set these bits */
               ;


    SPI1->CR2 = 0;                    // Default
 80002a2:	4b0a      	ldr	r3, [pc, #40]	@ (80002cc <SPI_Master_Init+0xc8>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	605a      	str	r2, [r3, #4]

    SPI1->CR1 |= SPI_CR1_SPE;        // Enable SPI1
 80002a8:	4b08      	ldr	r3, [pc, #32]	@ (80002cc <SPI_Master_Init+0xc8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a07      	ldr	r2, [pc, #28]	@ (80002cc <SPI_Master_Init+0xc8>)
 80002ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002b2:	6013      	str	r3, [r2, #0]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40020000 	.word	0x40020000
 80002c8:	40020400 	.word	0x40020400
 80002cc:	40013000 	.word	0x40013000

080002d0 <SPI_Master_Transmit>:

void SPI_Master_Transmit(uint8_t *data, uint8_t length) {
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	460b      	mov	r3, r1
 80002da:	70fb      	strb	r3, [r7, #3]
    // Pull CS low to select slave
    GPIOB->ODR &= ~SPI_CS_PIN;
 80002dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000350 <SPI_Master_Transmit+0x80>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000350 <SPI_Master_Transmit+0x80>)
 80002e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80002e6:	6153      	str	r3, [r2, #20]

    for (uint8_t i = 0; i < length; i++) {
 80002e8:	2300      	movs	r3, #0
 80002ea:	73fb      	strb	r3, [r7, #15]
 80002ec:	e018      	b.n	8000320 <SPI_Master_Transmit+0x50>
        while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer empty
 80002ee:	bf00      	nop
 80002f0:	4b18      	ldr	r3, [pc, #96]	@ (8000354 <SPI_Master_Transmit+0x84>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	f003 0302 	and.w	r3, r3, #2
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d0f9      	beq.n	80002f0 <SPI_Master_Transmit+0x20>
        SPI1->DR = data[i];               // Send byte
 80002fc:	7bfb      	ldrb	r3, [r7, #15]
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	4413      	add	r3, r2
 8000302:	781a      	ldrb	r2, [r3, #0]
 8000304:	4b13      	ldr	r3, [pc, #76]	@ (8000354 <SPI_Master_Transmit+0x84>)
 8000306:	60da      	str	r2, [r3, #12]
        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait until RX buffer not empty
 8000308:	bf00      	nop
 800030a:	4b12      	ldr	r3, [pc, #72]	@ (8000354 <SPI_Master_Transmit+0x84>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d0f9      	beq.n	800030a <SPI_Master_Transmit+0x3a>
        (void)SPI1->DR;                   // Read received byte (dummy read)
 8000316:	4b0f      	ldr	r3, [pc, #60]	@ (8000354 <SPI_Master_Transmit+0x84>)
 8000318:	68db      	ldr	r3, [r3, #12]
    for (uint8_t i = 0; i < length; i++) {
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	3301      	adds	r3, #1
 800031e:	73fb      	strb	r3, [r7, #15]
 8000320:	7bfa      	ldrb	r2, [r7, #15]
 8000322:	78fb      	ldrb	r3, [r7, #3]
 8000324:	429a      	cmp	r2, r3
 8000326:	d3e2      	bcc.n	80002ee <SPI_Master_Transmit+0x1e>
    }

    // Wait until SPI not busy before releasing CS
    while (SPI1->SR & SPI_SR_BSY);
 8000328:	bf00      	nop
 800032a:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <SPI_Master_Transmit+0x84>)
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000332:	2b00      	cmp	r3, #0
 8000334:	d1f9      	bne.n	800032a <SPI_Master_Transmit+0x5a>

    // Pull CS high to deselect slave
    GPIOB->ODR |= SPI_CS_PIN;
 8000336:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <SPI_Master_Transmit+0x80>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a05      	ldr	r2, [pc, #20]	@ (8000350 <SPI_Master_Transmit+0x80>)
 800033c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000340:	6153      	str	r3, [r2, #20]
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40020400 	.word	0x40020400
 8000354:	40013000 	.word	0x40013000

08000358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800035c:	bf00      	nop
 800035e:	e7fd      	b.n	800035c <NMI_Handler+0x4>

08000360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <HardFault_Handler+0x4>

08000368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <MemManage_Handler+0x4>

08000370 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <BusFault_Handler+0x4>

08000378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <UsageFault_Handler+0x4>

08000380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr

0800038e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ae:	f000 f83f 	bl	8000430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <SystemInit+0x20>)
 80003be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003c2:	4a05      	ldr	r2, [pc, #20]	@ (80003d8 <SystemInit+0x20>)
 80003c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000ed00 	.word	0xe000ed00

080003dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80003dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000414 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003e0:	f7ff ffea 	bl	80003b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003e4:	480c      	ldr	r0, [pc, #48]	@ (8000418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003e6:	490d      	ldr	r1, [pc, #52]	@ (800041c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800040a:	f000 f825 	bl	8000458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800040e:	f7ff fedb 	bl	80001c8 <main>
  bx  lr    
 8000412:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800041c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000420:	080004cc 	.word	0x080004cc
  ldr r2, =_sbss
 8000424:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000428:	20000024 	.word	0x20000024

0800042c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC_IRQHandler>
	...

08000430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000434:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <HAL_IncTick+0x20>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	461a      	mov	r2, r3
 800043a:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <HAL_IncTick+0x24>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4413      	add	r3, r2
 8000440:	4a04      	ldr	r2, [pc, #16]	@ (8000454 <HAL_IncTick+0x24>)
 8000442:	6013      	str	r3, [r2, #0]
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	20000000 	.word	0x20000000
 8000454:	20000020 	.word	0x20000020

08000458 <__libc_init_array>:
 8000458:	b570      	push	{r4, r5, r6, lr}
 800045a:	4d0d      	ldr	r5, [pc, #52]	@ (8000490 <__libc_init_array+0x38>)
 800045c:	4c0d      	ldr	r4, [pc, #52]	@ (8000494 <__libc_init_array+0x3c>)
 800045e:	1b64      	subs	r4, r4, r5
 8000460:	10a4      	asrs	r4, r4, #2
 8000462:	2600      	movs	r6, #0
 8000464:	42a6      	cmp	r6, r4
 8000466:	d109      	bne.n	800047c <__libc_init_array+0x24>
 8000468:	4d0b      	ldr	r5, [pc, #44]	@ (8000498 <__libc_init_array+0x40>)
 800046a:	4c0c      	ldr	r4, [pc, #48]	@ (800049c <__libc_init_array+0x44>)
 800046c:	f000 f818 	bl	80004a0 <_init>
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	10a4      	asrs	r4, r4, #2
 8000474:	2600      	movs	r6, #0
 8000476:	42a6      	cmp	r6, r4
 8000478:	d105      	bne.n	8000486 <__libc_init_array+0x2e>
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000480:	4798      	blx	r3
 8000482:	3601      	adds	r6, #1
 8000484:	e7ee      	b.n	8000464 <__libc_init_array+0xc>
 8000486:	f855 3b04 	ldr.w	r3, [r5], #4
 800048a:	4798      	blx	r3
 800048c:	3601      	adds	r6, #1
 800048e:	e7f2      	b.n	8000476 <__libc_init_array+0x1e>
 8000490:	080004c4 	.word	0x080004c4
 8000494:	080004c4 	.word	0x080004c4
 8000498:	080004c4 	.word	0x080004c4
 800049c:	080004c8 	.word	0x080004c8

080004a0 <_init>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	bf00      	nop
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr

080004ac <_fini>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	bf00      	nop
 80004b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b2:	bc08      	pop	{r3}
 80004b4:	469e      	mov	lr, r3
 80004b6:	4770      	bx	lr
